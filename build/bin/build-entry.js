var Components = require('../../components.json');
var fs = require('fs');
var render = require('json-templater/string');
var uppercamelcase = require('uppercamelcase');
var path = require('path');
var endOfLine = require('os').EOL;

var OUTPUT_PATH_COMMON = path.join(__dirname, '../../src/hd.common.js');
var OUTPUT_PATH_CHARTS = path.join(__dirname, '../../src/charts.common.js');
var OUTPUT_PATH_DRAGGABLE = path.join(__dirname, '../../src/draggable.common.js');
var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');

var IMPORT_TEMPLATE = "import {{name}} from './components/{{package}}/index.js';";
var INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
var MSGBOX_TEMPLATE = `Vue.prototype.$hdAlert = MessageBox.alert;
  Vue.prototype.$hdConfirm = MessageBox.confirm;
  Vue.prototype.$hdPrompt = MessageBox.prompt;
  Vue.prototype.$hdToast = MessageBox.toast;`;

delete Components.font;

var ComponentNames_Common = Object.keys(Components.common);
var ComponentNames_Charts = Object.keys(Components.charts);
var ComponentNames_Draggable = Object.keys(Components.draggable);
var ComponentNames = Object.keys({
  ...Components.common,
  ...Components.charts,
  ...Components.draggable
});

function getMainTemplate(flag) {
  return `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}
// import locale from 'element-ui/src/locale';
// import CollapseTransition from 'element-ui/src/transitions/collapse-transition';

const components = [
{{install}}
  // CollapseTransition
];

const install = function(Vue, opts = {}) {
  // locale.use(opts.locale);
  // locale.i18n(opts.i18n);

  components.forEach(component => {
    Vue.component(component.name, component);
  });

  // Vue.use(Loading.directive);

  Vue.prototype.$ELEMENT = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };
  ${flag ? '' : MSGBOX_TEMPLATE}
};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

module.exports = {
  version: '{{version}}',
  // locale: locale.use,
  // i18n: locale.i18n,
  install,
  // CollapseTransition,
  // Loading,
{{list}}
};

module.exports.default = module.exports;
`;
}
function getTemplate(names, flag) {
  var includeComponentTemplate = [];
  var installTemplate = [];
  var listTemplate = [];
  names.forEach(name => {
    var componentName = uppercamelcase(name);

    includeComponentTemplate.push(
      render(IMPORT_TEMPLATE, {
        name: componentName,
        package: name
      })
    );

    if (['Loading', 'MessageBox', 'Notification', 'Message'].indexOf(componentName) === -1) {
      installTemplate.push(
        render(INSTALL_COMPONENT_TEMPLATE, {
          name: componentName,
          component: name
        })
      );
    }

    if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`);
  });
  var MAIN_TEMPLATE = getMainTemplate(flag);
  return render(MAIN_TEMPLATE, {
    include: includeComponentTemplate.join(endOfLine),
    install: installTemplate.join(',' + endOfLine),
    version: process.env.VERSION || require('../../package.json').version,
    list: listTemplate.join(',' + endOfLine)
  });
}

fs.writeFileSync(OUTPUT_PATH, getTemplate(ComponentNames, false));
fs.writeFileSync(OUTPUT_PATH_COMMON, getTemplate(ComponentNames_Common, false));
fs.writeFileSync(OUTPUT_PATH_CHARTS, getTemplate(ComponentNames_Charts, true));
fs.writeFileSync(OUTPUT_PATH_DRAGGABLE, getTemplate(ComponentNames_Draggable, true));
